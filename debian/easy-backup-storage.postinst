#!/bin/sh
# postinst script for easy-backup-storage
#
# This will create a ssh key to use for connect to the
# machine to be backupped

set -e

# summary of how this script can be called:
#        * <postinst> `configure' <most-recently-configured-version>
#        * <old-postinst> `abort-upgrade' <new version>
#        * <conflictor's-postinst> `abort-remove' `in-favour' <package>
#          <new-version>
#        * <postinst> `abort-remove'
#        * <deconfigured's-postinst> `abort-deconfigure' `in-favour'
#          <failed-install-package> <version> `removing'
#          <conflicting-package> <version>
# for details, see http://www.debian.org/doc/debian-policy/ or
# the debian-policy package

# Source debconf library.
if [ -e /usr/share/debconf/confmodule ]; then
	. /usr/share/debconf/confmodule
fi

	db_get easy-backup-storage/domain_name
	DOMAIN="${RET}"

	HOMEZ=/root
    SSH_DIR="${HOME}/.ssh/"
    SSH_KEY_FILEPATH="${SSH_DIR}/id_rsa_rsnapshot"

action=$1
version=$2
# only on new install or reconfigure
if [ "x$version" = "x" ] || [ "$action" = "reconfigure" ]; then
	db_get easy-backup-storage/backupuser
	BACKUPUSER="${RET:-backupuser}"


	mkdir -p $SSH_DIR

    test -f "${SSH_KEY_FILEPATH}" || ssh-keygen -f "${SSH_KEY_FILEPATH}" -N ''
fi

    echo "this is the text to put in the endpoint's authorized_keys\n\n"
    cat "${SSH_KEY_FILEPATH}".pub


# dh_installdeb will replace this with shell code automatically
# generated by other debhelper scripts.

#DEBHELPER#

exit 0
